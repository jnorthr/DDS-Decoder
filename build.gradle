// sample build.gradle file to test DDS
// find gradle docs for more info on the tasks api
// http://mrhaki.blogspot.fr/2009/11/using-gradle-for-mixed-java-and-groovy.html
// /Volumes/Data/dev/gradleprojects/project3/build.gradle

// get externals via plugins
apply plugin:'groovy'
apply plugin:'application'
 
repositories{
		jcenter()
        maven { url "http://m2repo.spockframework.org/snapshots" }
}


// dependencies only work if you know which repository they are in and declare it above
dependencies{
	// maven  group       : artifact    :vers
	compile 'commons-codec:commons-codec:1.6'
	
	// need to pick which groovy version to use for project - does NOT use gradle's version
	compile 'org.codehaus.groovy:groovy:2.4.7'
	//testCompile 'org.codehaus.groovy:groovy:2.4.7'
	testCompile 'junit:junit:4.8.2'
    //testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
}

// sample to use git - may not work well
buildscript {
  repositories { mavenCentral() }
}

// used in jar create if you gradle build; jar name as arch.... name
version = "1.0-${new Date().format('yyyyMMdd')}"
archivesBaseName = 'dds'

println "\ncompile classpath="+configurations.compile.asPath+"\n"

task hello
task world

// since gradle is a DSL of groovy, we can include groovy code here and use it 
// in tasks
def say(tx){ println tx}

hello{
	doLast{
		print "Hello "
	}
}

world{
	dependsOn << hello
	doLast{
		say "World ! ${projectDir}"
	}
}

task helloWorld{
	dependsOn << world
	dependsOn << hello
}
task helloWorld2{
	dependsOn = [ world, hello ]
}

// execute compiled java code
task hotJava(type:JavaExec){
	main='org.jnorthr.dds.Test'
	// set c/p to use the gradle composite cp it builds on the fly
	classpath += sourceSets.main.runtimeClasspath
	args "${projectDir}/build/resources/main/data/", "${projectDir}/build/resources/main/qddssrc/"
}

task(runDSPFFD, dependsOn: 'classes', type: JavaExec) {
	main = 'org.jnorthr.dds.commands.DSPFFD'
	classpath = sourceSets.main.runtimeClasspath
	args "${projectDir}/build/resources/main/data/", "${projectDir}/build/resources/main/qddssrc/"
	systemProperty 'LOGFILEPATH', "${projectDir}/build/resources/main/data/"
}

task(runSupport, dependsOn: 'classes', type: JavaExec) {
	main = 'org.jnorthr.dds.DDSSupport'
	classpath = sourceSets.main.runtimeClasspath
	args "${projectDir}/build/resources/main/data/", "${projectDir}/build/resources/main/qddssrc/"
}

task(runChooser, dependsOn: 'classes', type: JavaExec) {
	main = 'org.jnorthr.dds.utilities.Chooser'
	classpath = sourceSets.main.runtimeClasspath
	classpath += sourceSets.main.compileClasspath
}

task(runPF, dependsOn: 'classes', type: JavaExec) {
	main = 'org.jnorthr.dds.drivers.PhysicalFile'
	classpath = sourceSets.main.runtimeClasspath
	systemProperty 'LOGFILEPATH', "${projectDir}/build/resources/main/data/"
	args "${projectDir}/build/resources/main/qddssrc/"
}

task(runZD, dependsOn: 'classes', type: JavaExec) {
	main = 'org.jnorthr.dds.drivers.ZonedDecimal'
	systemProperty 'LOGFILEPATH', "${projectDir}/build/resources/main/data/"
	classpath = sourceSets.main.runtimeClasspath
}

// ./gradlew   // will run this default task
defaultTasks 'runDSPFFD'


// http://www.gradle.org/docs/current/userguide/application_plugin.html
// also has a bunch of other helper tasks - well worth a look
run{
	mainClassName='org.jnorthr.dds.DDS'  // used by application plugin so 'gradle run' runs your app
    args "${projectDir}/build/resources/main/data/","${projectDir}/build/resources/main/qddssrc/"
	systemProperty 'LOGFILEPATH', "${projectDir}/build/resources/main/data/"	
}

// ================================
// test features
test{
	//useTestNG() and set Java system properties
	systemProperty 'LOGFILEPATH', "${projectDir}/build/resources/main/data/"	
	systemProperty 'DDSFILEPATH', "${projectDir}/build/resources/main/qddssrc/"	

	include 'org/jnorthr/dds/**'
	exclude 'org/jnorthr/fred/**'
	testLogging.showStandardStreams = true
	maxHeapSize="512m"
	jvmArgs '-XX:MaxPermSize=256m'

	beforeTest{ descriptor -> logger.lifecycle("Running test:"+descriptor)}

	afterTest { desc, result -> 
        println "Executing test ${desc.name} [${desc.className}] with result: ${result.resultType}"
	}
	onOutput{descriptor, event -> logger.lifecycle("Test:"+descriptor+" gave std out/err:"+event.message)}
}
test.dependsOn cleanTest

// ================================
task wrapper(type: Wrapper) {
    gradleVersion = '2.13'
}

// run this task once to build project folder structure
task "setup" << {
   sourceSets*.java.srcDirs*.each { it.mkdirs() }
   sourceSets*.groovy.srcDirs*.each { it.mkdirs() }
   sourceSets*.resources.srcDirs*.each { it.mkdirs() }
}